datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  telegramId       String   @unique
  username         String?
  avatar           String?
  user_link        String?
  referral         String?  @db.ObjectId
  level            Int      @default(5)
  tonWalletAddress String?
  walletStatus     Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  referredBy User?  @relation("UserReferrals", fields: [referral], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals  User[] @relation("UserReferrals")

  referralCircleId String?         @db.ObjectId
  referralCircle   ReferralCircle? @relation("UserToReferralCircle")

  referralHistory ReferralHistory[]
  Referral        Referral[]
}

model ReferralCircle {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId        String   @unique @db.ObjectId
  owner          User     @relation("UserToReferralCircle", fields: [ownerId], references: [id])
  status         String   @default("active") // active | closed
  referralsCount Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  referrals       Referral[]        @relation("CircleReferrals")
  ReferralHistory ReferralHistory[]
}

model Referral {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  circleId        String         @db.ObjectId
  circle          ReferralCircle @relation("CircleReferrals", fields: [circleId], references: [id])
  referralId      String         @db.ObjectId
  referral        User           @relation(fields: [referralId], references: [id])
  walletConnected Boolean        @default(false)
  createdAt       DateTime       @default(now())
}

model ReferralHistory {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  circleId  String         @db.ObjectId
  circle    ReferralCircle @relation(fields: [circleId], references: [id])
  createdAt DateTime       @default(now())
}
